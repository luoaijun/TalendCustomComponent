<%@ jet
    imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
        java.util.List
        java.util.Map
    "
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    String dsConnName = (String)ElementParameterParser.getValue(node, "__CONNECTION_NAME__");

    String fileName = (String)ElementParameterParser.getValue(node, "__FILE_NAME__");

    String collectionName = (String)ElementParameterParser.getValue(node, "__COLLECTION_NAME__");

    String destFilePath = (String)ElementParameterParser.getValue(node, "__DEST_FILE_PATH__");

    String tags = (String)ElementParameterParser.getValue(node, "__TAGS__");
%>
    String apiUrl_<%=cid %> = globalMap.get("<%=dsConnName %>_URL").toString();
    String apiToken_<%=cid %> = globalMap.get("<%=dsConnName %>_TOKEN").toString();
    com.mashape.unirest.http.HttpResponse<com.mashape.unirest.http.JsonNode> response_<%=cid %>;

    // TODO: Implement a cache
    String collectionId_<%=cid %> = null;
    response_<%=cid %> = com.mashape.unirest.http.Unirest.get(apiUrl_<%=cid %> + "/api/v1/lakefs/root")
        .header("authorization", "Basic " + apiToken_<%=cid %>)
        .asJson();
    for(int i = 0; i < response_<%=cid %>.getBody().getArray().length(); i++) {
        org.json.JSONObject collection = (org.json.JSONObject) response_<%=cid %>.getBody().getArray().get(i);
        if (collection.getString("fileName").equals(<%=collectionName %>)) {
            collectionId_<%=cid %> = collection.getString("id");
        }
    }

    if(collectionId_<%=cid %> == null) {
        throw new Exception("Collection not found");
    }

    String fileId_<%=cid %> = null;
    response_<%=cid %> = com.mashape.unirest.http.Unirest.get(apiUrl_<%=cid %> + "/api/v1/lakefs/" + collectionId_<%=cid %>)
        .header("authorization", "Basic " + apiToken_<%=cid %>)
        .asJson();
    for(int i = 0; i < response_<%=cid %>.getBody().getArray().length(); i++) {
        org.json.JSONObject file = (org.json.JSONObject) response_<%=cid %>.getBody().getArray().get(i);
        if (file.getString("fileName").equals(<%=fileName %>)) {
            fileId_<%=cid %> = file.getString("id");
        }
    }

    if(fileId_<%=cid %> == null) {
        throw new Exception("File not found");
    }

    String transferId_<%=cid %> = com.mashape.unirest.http.Unirest.get(apiUrl_<%=cid %> + "/api/v1/lakefs/" + collectionId_<%=cid %> + "/files/" + fileId_<%=cid %> + "/records/asfile")
        .header("authorization", "Basic " + apiToken_<%=cid %>)
        .header("accept", "text/csv")
        .header("accept-tags", <%=tags %>)
        .asString()
        .getBody();

    do {
        response_<%=cid %> = com.mashape.unirest.http.Unirest.get(apiUrl_<%=cid %> + "/ftp/files/" + transferId_<%=cid %>)
            .header("authorization", "Basic " + apiToken_<%=cid %>)
            .asJson();
    }
    while(!response_<%=cid %>.getBody().getObject().getBoolean("ready"));

    java.io.File out_<%=cid %> = new java.io.File(<%= destFilePath %>);
    // out_<%=cid %>.deleteOnExit();

    try(java.io.InputStream in_<%=cid %> = com.mashape.unirest.http.Unirest.get(apiUrl_<%=cid %> + "/ftp/files/" + transferId_<%=cid %> + "/asfile")
        .header("authorization", "Basic " + apiToken_<%=cid %>)
        .asBinary()
        .getBody())
    {
        java.nio.file.Files.copy(
        in_<%=cid %>,
        out_<%=cid %>.toPath(),
        java.nio.file.StandardCopyOption.REPLACE_EXISTING);
    }
